#HELP
#obtain the mean and standard deviation of age, for Power Forwards, with 5 and 10 years of experience (including 5 and 10).
#HELP
ggplot(gsw) +
geom_point(aes(x = height, y = weight))
#Find out how to make another scatterplot of height and weight, using geom_text() to display the names of the players
ggplot(gsw, aes(x = height, y = weight)) +
geom_point() + geom_text(aes(label = player), check_overlap = TRUE)
#Get a scatter plot of height and weight, for ALL the warriors, displaying their names with geom_label().
ggplot(gsw, aes(x = height, y = weight)) +
geom_point() + geom_label(aes(label = player))
#Get a density plot of salary (for all NBA players).
ggplot(dat, aes(salary)) + geom_density(kernel = "gaussian")
ggplot(dat, aes(points2)) + geom_histogram(binwidth = 50)
#Get a histogram of points2 with binwidth of 50 (for all NBA players).
#Get a barchart of the position frequencies (for all NBA players).
ggplot(dat, aes(position)) + geom_bar()
#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
dat1 <- filter(dat, position == "C")
ggplot(dat1, aes(x = experience, y = salary)) + geom_smooth(method = "lm")
#Repeat the same scatterplot of experience and salary of all Centers, but now use geom_smooth() to add a loess line (i.e. smooth line).
ggplot(dat1, aes(x = experience, y = salary)) + geom_smooth(stat = "smooth")
gsw_mpg <- select((arrange(mutate((filter(dat, team == "GSW")), min_per_game = minutes/games), desc(min_per_game))), player, experience, min_per_game)
gsw_mpg
#use summarise() to get the largest height value.
summarize(dat, max(height))
#display the average triple points by team, in ascending order, of the bottom-5 teams (worst 3pointer teams)
summary <- summarize(group_by(dat, team), mean(points3))
#display the average triple points by team, in ascending order, of the bottom-5 teams (worst 3pointer teams)
summary <- summarize(group_by(dat, team), average_triple_pts = mean(points3))
arrange(summary, average_triple_pts)
slice(arrange(summary, average_triple_pts), 1:5)
#obtain the mean and standard deviation of age, for Power Forwards, with 5 to 10 years of experience (including 5 and 10).
power_forwards <- select(dat, position = "PF")
dat <- read.csv('nba2018-players.csv')
dat
#obtain the mean and standard deviation of age, for Power Forwards, with 5 to 10 years of experience (including 5 and 10).
power_forwards <- select(dat, position = "PF")
#obtain the mean and standard deviation of age, for Power Forwards, with 5 to 10 years of experience (including 5 and 10).
power_forwards <- select(dat, position == "PF")
#obtain the mean and standard deviation of age, for Power Forwards, with 5 to 10 years of experience (including 5 and 10).
power_forwards <- filter(dat, position == "PF")
#obtain the mean and standard deviation of age, for Power Forwards, with 5 to 10 years of experience (including 5 and 10).
power_forwards <- filter(dat, position == "PF" & experience >= 5 & experience <= 10)
summarize(group_by(dat, power_forwards)), mean_age = mean(age), sd = sd(age))
summarize(group_by(dat, power_forwards), mean_age = mean(age), sd = sd(age))
#obtain the mean and standard deviation of age, for Power Forwards, with 5 to 10 years of experience (including 5 and 10).
power_forwards <- filter(dat, position == "PF" & experience >= 5 & experience <= 10)
summarize(group_by(dat, power_forwards), mean_age = mean(age), sd = sd(age))
#obtain the mean and standard deviation of age, for Power Forwards, with 5 to 10 years of experience (including 5 and 10).
power_forwards <- filter(dat, position == "PF" & experience >= 5 & experience <= 10)
summarize(group_by(power_forwards), mean_age = mean(age), sd = sd(age))
#HELP
#Get a scatter plot of height and weight, for ALL the warriors, displaying their names with geom_label().
ggplot(gsw, aes(x = height, y = weight)) +
geom_point() + geom_label(aes(label = player))
#Get a density plot of salary (for all NBA players).
ggplot(dat, aes(salary)) + geom_density(kernel = "gaussian")
#Make scatterplots of experience and salary faceting by position
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point() +
facet_wrap(~ position)
#Make scatterplots of experience and salary faceting by team
ggplot(data = dat, aes(x = experience, y = salary)) + geom_point() + facet_wrap(~team)
#Make density plots of age faceting by team
ggplot(dat, aes(age)) + geom_density(kernel = "gaussian") + facet_wrap(~team)
#Make scatterplots of height and weight faceting by position
ggplot(data = dat, aes(x = height, y = weight)) + geom_point() + facet_wrap(~team)
#Make scatterplots of height and weight, with a 2-dimensional density, geom_density2d(), faceting by position
ggplot(dat, aes(x = height, y = weight)) + geom_density2d() + facet_wrap(position)
#Make scatterplots of height and weight, with a 2-dimensional density, geom_density2d(), faceting by position
ggplot(dat, aes(x = height, y = weight)) + geom_density2d() + facet_wrap(~position)
ggplot(dat, aes(x = experience, y = salary)) + geom_point() + theme_bw()
ggplot(dat, aes(x = experience, y = salary)) + geom_point() + theme_bw
ggplot(dat, aes(x = experience, y = salary)) + geom_point() + theme_bw()
#Repeat any of the previous plots but now adding a leyer with another theme e.g. theme_minimal(), theme_dark(), theme_classic()
ggplot(dat, aes(x = height, y = weight)) + geom_density2d() + facet_wrap(~position) + theme_minimal()
#Repeat any of the previous plots but now adding a leyer with another theme e.g. theme_minimal(), theme_dark(), theme_classic()
ggplot(dat, aes(x = height, y = weight)) + geom_density2d() + facet_wrap(~position) + theme_dark()
#Repeat any of the previous plots but now adding a leyer with another theme e.g. theme_minimal(), theme_dark(), theme_classic()
ggplot(dat, aes(x = height, y = weight)) + geom_density2d() + facet_wrap(~position) + theme_classic()
#data_types <- c("character", "character", "factor", "integer", "integer", "integer", "integer", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer")
#data_types <- c(col_c, col_c, col_f, col_i, col_i, col_i, col_i, col_c, col_d, col_i, col_i, col_i, col_i, col_i, col_i)
data_types <- list(col_character(), col_character(), col_factor(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer(), col_double(), col_integer(),
col_integer(), col_integer(), col_integer(), col_integer(), col_integer())
library(readr)
library(dplyr)
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'nba2018-players.csv'
datafile <- paste0(github, repo)
library(ggplot2)
library(readr)
library(dplyr)
library(ggplot2)
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'nba2018-players.csv'
datafile <- paste0(github, repo)
#data_types <- c("character", "character", "factor", "integer", "integer", "integer", "integer", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer")
#data_types <- c(col_c, col_c, col_f, col_i, col_i, col_i, col_i, col_c, col_d, col_i, col_i, col_i, col_i, col_i, col_i)
data_types <- list(col_character(), col_character(), col_factor(), col_integer(), col_integer(), col_integer(), col_integer(), col_integer(), col_double(), col_integer(),
col_integer(), col_integer(), col_integer(), col_integer(), col_integer())
dat <- read_csv(repo, col_names = TRUE, data_types)
dat <- read_csv(repo, col_names = TRUE, data_types)
dat
team_salaries_in_millions
library(dplyr)
team_salaries_in_millions <- arrange(summarize(group_by(dat, team), total_salary = sum(salary/1000000), mean_salary = mean(salary/1000000), median_salary = median(salary/1000000)), desc(total_salary))
team_salaries_in_millions
ggplot(team_salaries_in_millions, aes(team, total_salary)) + geom_col() + coord_flip() + labs(title = "NBA Teams Ranked by Total Salary", x = "Team Name", y = "Total Salary (in millions)")
ggplot(team_salaries_in_millions, aes(team, desc(total_salary)) + geom_col() + coord_flip() + labs(title = "NBA Teams Ranked by Total Salary", x = "Team Name", y = "Total Salary (in millions)")
#HELP include vertical line
ggplot(team_salaries_in_millions, aes(team, total_salary) + geom_col() + coord_flip() + labs(title = "NBA Teams Ranked by Total Salary", x = "Team Name", y = "Total Salary (in millions)")
#HELP include vertical line
ggplot(team_salaries_in_millions, aes(team, total_salary)) + geom_col() + coord_flip() + labs(title = "NBA Teams Ranked by Total Salary", x = "Team Name", y = "Total Salary (in millions)")
#HELP include vertical line
ggplot(team_salaries_in_millions, aes(team, total_salary)) + geom_col() + coord_flip() + labs(title = "NBA Teams Ranked by Total Salary", x = "Team Name", y = "Total Salary (in millions)") + factor(team_salaries_in_millions$total_salary, levels = team_salaries_in_millions$total_salary[order(team_salaries_in_millions$total_salary)])
ggplot(team_salaries_in_millions, aes(team, total_salary)) + geom_col() + coord_flip() + labs(title = "NBA Teams Ranked by Total Salary", x = "Team Name", y = "Total Salary (in millions)") + factor(team_salaries_in_millions$total_salary, levels = team_salaries_in_millions$total_salary[order(team_salaries_in_millions$total_salary)])
ggplot(team_salaries_in_millions, aes(team, total_salary)) + geom_col() + coord_flip() + labs(title = "NBA Teams Ranked by Total Salary", x = "Team Name", y = "Total Salary (in millions)")
#HELP include vertical line
name <- factor(x$team, levels = x$team[order(x$total_salary)])
getwd()
read.csv('gapminder-FiveYearData.csv')
gapminder <- read.csv('gapminder-FiveYearData.csv')
gapminder
ggplot(data = gapminder, aes(x = lifeExp, x = year, group = country))
library(ggplot2)
ggplot(data = gapminder, aes(x = lifeExp, x = year, group = country))
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country))
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(a)
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point()
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + geom_line()
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + xlab("GDP")
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + xlab("GDP")
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + xlab("GDP")
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + xlab("GDP")
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + xlab("GDP")
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + xlab("GDP")
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + xlab("GDP") + scale_x_log10()
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent)) +
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point(aes(color = continent))
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point()
ggplot(data = gapminder, aes(y = lifeExp, x = year, group = country)) + geom_point() + scale_x_log10()
ggplot(data = gapminder, aes(y = lifeExp, x = GDPPerCap, group = country)) + geom_point() + scale_x_log10()
ggplot(data = gapminder, aes(y = lifeExp, x = GDPPercap, group = country)) + geom_point() + scale_x_log10()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, group = country)) + geom_point() + scale_x_log10()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, color = continent)) + geom_point() + scale_x_log10()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, color = continent)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm')
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, color = continent)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, group = country)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, group = country)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, group = country)) + geom_point(aes(color = continent)) + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, group = country)) + geom_point(aes(color = country)) + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, group = country)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap, group = country)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
summary(lm(LifeExp ~ gdpPercap, data = gapminder))
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth() + summary(lm(LifeExp ~ gdpPercap, data = gapminder))
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth() + summary(lm(lifeExp ~ gdpPercap, data = gapminder))
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth() + summary(lm(lifeExp ~ gdpPercap, data = gapminder))
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(gapminder, aes(gdpPercap, y = lifeExp)) + geom_point(aes(Color = continent))
ggplot(gapminder, aes(gdpPercap, y = lifeExp)) + geom_point(aes(Color = continent))+ scale_x_log10() + geom_smooth(method = "lm", size = 1.5, colo = "yellow")
ggplot(gapminder, aes(gdpPercap, y = lifeExp)) + geom_point(aes(color = continent))+ scale_x_log10() + geom_smooth(method = "lm", size = 1.5, colo = "yellow")
ggplot(gapminder, aes(gdpPercap, y = lifeExp)) + geom_point(aes(color = continent))+ scale_x_log10() + geom_smooth(method = "lm", size = 1.5, color = "yellow")
ggplot(gapminder, aes(gdpPercap, y = lifeExp)) + geom_point(aes(color = continent))+ scale_x_log10() + geom_smooth(method = "lm", size = 1.5, color = "yellow")
ggplot(gapminder, aes(gdpPercap, y = lifeExp)) + geom_point(aes(color = continent))+ scale_x_log10() + geom_smooth(method = "lm", size = 1.5, color = "yellow")
ggplot(data = gapminder, aes(y = lifeExp, x = gdpPercap)) + geom_point() + scale_x_log10() + geom_smooth(method = 'lm') + geom_smooth()
ggplot(gapminder, aes(gdpPercap, y = lifeExp)) + geom_point(aes(color = continent))+ scale_x_log10() + geom_smooth(method = "lm", size = 1.5, color = "yellow")
geom_smooth(method = "lm", size = 1.5, color = "yellow")
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop, color = year)) + scale_x_log10()+geom_smooth(method = "lm", size = 1.5, color = "yellow")
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop, color = year)) + scale_x_log10()+geom_smooth(method = "lm", size = 1.5, color = "yellow") + facet_wrap(~continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10()+geom_smooth(method = "lm", size = 1.5, color = "yellow") + facet_wrap(~continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop, color = year)) + scale_x_log10()+geom_smooth(method = "lm", size = 1.5, color = "yellow") + facet_wrap()
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point(aes(size = pop, color = year)) + scale_x_log10()+geom_smooth(method = "lm", size = 1.5, color = "yellow") + facet_wrap(~continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10()+geom_smooth(method = "lm", size = 1.5, color = "yellow") + facet_wrap(~continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10()+geom_smooth(method = "lm", size = 1.5) + facet_wrap(~continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10()+ geom_smooth(method = "lm", size = 1.5) + facet_grid(~continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10()+ geom_smooth(aes(color = continent) size = 1.5) + facet_grid(~continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10()+ geom_smooth(aes(color = continent)) + facet_grid(~continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_log10()+ geom_smooth(aes(color = continent)) + facet_grid(~continent)
#density plots are basically like histograms, except they're continuous
ggplot(gapminder, aes(lifeExp)) + geom_density(bw = .5, na.rm = T)
#density plots are basically like histograms, except they're continuous
ggplot(gapminder, aes(lifeExp)) + geom_density(bw = .5)
#density plots are basically like histograms, except they're continuous
ggplot(gapminder, aes(lifeExp)) + geom_density(bw = .5, na.rm = T)
ex_oceania <- filter(gapminder, continent != "Oceania")
ex_oceania <- filter(gapminder, continent != "Oceania")
ggplot(data = ex_oceania, aes(x = lifeExp, fill = continent)) + geom_bar(stat = "bin") + scale_x_log10() + facet_grid()
ex_oceania <- filter(gapminder, continent!= "Oceania")
ex_oceania <- filter(gapminder, continent!= "Oceania")
ex_oceania <- filter(gapminder, gapminder$continent!= "Oceania")
ggplot(data = ex_oceania, aes(x = lifeExp, fill = continent)) + geom_bar(stat = "bin") + scale_x_log10() + facet_grid()
ex_oceania <- filter(gapminder, continent!= "Oceania")
head(gapminder$continent)
gapminder_minusOceania <- gapminder %>% filter(continent != "Oceania")
library(dplyr)
gapminder_minusOceania <- gapminder %>% filter(continent != "Oceania")
gapminder_minusOceania
ggplot(data = gapminder, aes(x = continent, y = lifeExp)) + geom_boxplot()
ggplot(data = ex_oceania, aes(x = lifeExp, fill = continent)) + geom_density()
ggplot(data = gapminder, aes(x = continent, y = lifeExp)) + geom_boxplot() + theme_minimal()
ggplot(data = gapminder, aes(x = continent, y = lifeExp)) + geom_boxplot() + theme_dark
ggplot(data = gapminder, aes(x = continent, y = lifeExp)) + geom_boxplot() + theme_dark()
install.packages("ggthemes")
library(ggt)
library(ggthemes)
ggplot(data = gapminder, aes(x = continent, y = lifeExp)) + geom_boxplot() + theme_fivethirtyeight()
pwd
pwd
pwd
pwd
#pwd
#mkdir(stat133-lab05)
curl -O http://textfiles.com/food/bread.txt
#pwd
#mkdir(stat133-lab05)
curl -O http://textfiles.com/food/bread.txt
#pwd
#mkdir(stat133-lab05)
curl -O http://textfiles.com/food/bread.txt
pwd
license()
contributors()
citation()
demo()
read.table("https://www.kaggle.com/ronitf/heart-disease-uci#heart.csv")
read.table("https://www.kaggle.com/ronitf/heart-disease-uci#heart.csv", header=TRUE, sep=",", fill=TRUE)
yeet <- read.table("https://www.kaggle.com/ronitf/heart-disease-uci#heart.csv", header=TRUE, sep=",", fill=TRUE)
getwd()
setwd(C:/Users/rsast/OneDrive/Downloads)
demo()
yeet
1&2
2 == TRUE
1 == TRUE
10 == TRUE
10 == FALSE
0 == FALSE
knitr::opts_chunk$set(echo = TRUE)
getwd()
thompson_scatterplot <- ggplot(data = thompson) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
library(ggplot2)
tterplot
thompson_scatterplot <- ggplot(data = thompson) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
curry$shot_made_flag[curry$shot_made_flag == "y"] <- "shot_yes"
## title: short title
## description: a short description of what the script is about
## input(s): what are the inputs required by the script?
## output(s): what are the outputs created when running the script?
setwd("Users/rsast/Desktop/workout01/data")
#Curry
curry <- read.csv("stephen-curry.csv", stringsAsFactors = FALSE)
curry$name <- "Stephen Curry"
curry$shot_made_flag[curry$shot_made_flag == "n"] <- "shot_no"
curry$shot_made_flag[curry$shot_made_flag == "y"] <- "shot_yes"
curry$minute <- curry$period*12 - curry$minutes_remaining
write.csv(curry)
sink( file = "stephen-curry.txt")
summary(curry)
sink()
#Iguodala
iguodala <- read.csv("andre-iguodala.csv", stringsAsFactors = FALSE)
iguodala$name <- " Andre Iguodala"
iguodala$shot_made_flag[iguodala$shot_made_flag == "n"] <- "shot_no"
iguodala$shot_made_flag[iguodala$shot_made_flag == "y"] <- "shot_yes"
iguodala$minute <- iguodala$period*12 - iguodala$minutes_remaining
sink( file = "andre-iguodala.txt")
summary(iguodala)
sink()
#Durant
durant <- read.csv("kevin-durant.csv", stringsAsFactors = FALSE)
durant$name <- "Kevin Durant"
durant$shot_made_flag[durant$shot_made_flag == "n"] <- "shot_no"
durant$shot_made_flag[durant$shot_made_flag == "y"] <- "shot_yes"
durant$minute <- durant$period*12 - durant$minutes_remaining
sink( file = "kevin-durant.txt")
summary(durant)
sink()
#Thompson
thompson <- read.csv("klay-thompson.csv", stringsAsFactors = FALSE)
thompson$name <- "Klay Thompson"
thompson$shot_made_flag[thompson$shot_made_flag == "n"] <- "shot_no"
thompson$shot_made_flag[thompson$shot_made_flag == "y"] <- "shot_yes"
thompson$minute <- thompson$period*12 - thompson$minutes_remaining
sink( file = "klay-thompson.txt")
summary(thompson)
sink()
#Green
green <- read.csv("draymond-green.csv", stringsAsFactors = FALSE)
green$name <- "Draymond Green"
green$shot_made_flag[green$shot_made_flag == "n"] <- "shot_no"
green$shot_made_flag[green$shot_made_flag == "y"] <- "shot_yes"
green$minute <- green$period*12 - green$minutes_remaining
sink( file = "draymond-green.txt")
summary(green)
sink()
shots_data_summary <- rbind(curry, iguodala, durant, thompson, green)
write.csv(shots_data_summary,"../output/shots-data-summary.txt")
sink( file = "shots-data-summary.txt")
summary(shots_data_summary)
sink()
iguodala <- read.csv("andre-iguodala.csv", stringsAsFactors = FALSE)
## title: short title
## description: a short description of what the script is about
## input(s): what are the inputs required by the script?
## output(s): what are the outputs created when running the script?
setwd("Users/rsast/Desktop/workout01/data")
getwd()
setwd(~/)
setwd(~/)
## title: short title
## description: a short description of what the script is about
## input(s): what are the inputs required by the script?
## output(s): what are the outputs created when running the script?
setwd("Users/rsast/Desktop/workout01/data1")
getwd()
setwd("C:/Users/rsast/OneDrive/Documents")
setwd("C:/Users/rsast/Desktop/workout01/data1")
getwd()
#Curry
curry <- read.csv("stephen-curry.csv", stringsAsFactors = FALSE)
curry$name <- "Stephen Curry"
curry$shot_made_flag[curry$shot_made_flag == "n"] <- "shot_no"
curry$shot_made_flag[curry$shot_made_flag == "y"] <- "shot_yes"
curry$minute <- curry$period*12 - curry$minutes_remaining
write.csv(curry)
sink( file = "stephen-curry.txt")
summary(curry)
sink()
#Iguodala
iguodala <- read.csv("andre-iguodala.csv", stringsAsFactors = FALSE)
iguodala$name <- " Andre Iguodala"
iguodala$shot_made_flag[iguodala$shot_made_flag == "n"] <- "shot_no"
iguodala$shot_made_flag[iguodala$shot_made_flag == "y"] <- "shot_yes"
iguodala$minute <- iguodala$period*12 - iguodala$minutes_remaining
sink( file = "andre-iguodala.txt")
summary(iguodala)
sink()
#Durant
durant <- read.csv("kevin-durant.csv", stringsAsFactors = FALSE)
durant$name <- "Kevin Durant"
durant$shot_made_flag[durant$shot_made_flag == "n"] <- "shot_no"
durant$shot_made_flag[durant$shot_made_flag == "y"] <- "shot_yes"
durant$minute <- durant$period*12 - durant$minutes_remaining
sink( file = "kevin-durant.txt")
summary(durant)
sink()
#Thompson
thompson <- read.csv("klay-thompson.csv", stringsAsFactors = FALSE)
thompson$name <- "Klay Thompson"
thompson$shot_made_flag[thompson$shot_made_flag == "n"] <- "shot_no"
thompson$shot_made_flag[thompson$shot_made_flag == "y"] <- "shot_yes"
thompson$minute <- thompson$period*12 - thompson$minutes_remaining
sink( file = "klay-thompson.txt")
summary(thompson)
sink()
#Green
green <- read.csv("draymond-green.csv", stringsAsFactors = FALSE)
green$name <- "Draymond Green"
green$shot_made_flag[green$shot_made_flag == "n"] <- "shot_no"
green$shot_made_flag[green$shot_made_flag == "y"] <- "shot_yes"
green$minute <- green$period*12 - green$minutes_remaining
sink( file = "draymond-green.txt")
summary(green)
sink()
shots_data_summary <- rbind(curry, iguodala, durant, thompson, green)
write.csv(shots_data_summary,"../output/shots-data-summary.txt")
sink( file = "shots-data-summary.txt")
summary(shots_data_summary)
sink()
library(ggplot2)
thompson_scatterplot <- ggplot(data = thompson) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
thompson_scatterplot
install.packages("jpeg")
install.packages("grid")
install.packages("grid")
load(jpeg)
library(jpeg)
library(grid)
court_file <- "../images/nba-court.jpg"
# create raste object
court_image <- rasterGrob(
readJPEG(court_file),
width = unit(1, "npc"),
height = unit(1, "npc"))
# shot chart with court background
thompson_shot_chart <- ggplot(data = thompson) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Klay Thompson (2016 season)') +
theme_minimal()
thompson_shot_chart
iguodala_scatterplot
iguodala_scatterplot <- ggplot(data = iguodala) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
iguodala_scatterplot
iguodala_shot_chart <- ggplot(data = iguodala) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Andre Iguodala (2016 season)') +
theme_minimal()
iguodala_shot_chart
pdf("andre-iguodala-shot-chart.pdf", width=6.5, height=5)
ggsave(pdf("andre-iguodala-shot-chart.pdf", width=6.5, height=5))
ggsave("andre-iguodala-shot-chart.pdf", width=6.5, height=5)
ggsave("../output/andre-iguodala-shot-chart.pdf", width=6.5, height=5)
ggsave("../images/andre-iguodala-shot-chart.pdf", width=6.5, height=5)
green_scatterplot <- ggplot(data = green) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
green_scatterplot
green_shot_chart <- ggplot(data = green) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Draymond Green (2016 season)') +
theme_minimal()
green_shot_chart
ggsave("../images/draymond-green-shot-chart.pdf", width=6.5, height=5)
durant_scatterplot <- ggplot(data = durant) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
durant_scatterplot
durant_shot_chart <- ggplot(data = durant) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Kevin Durant (2016 season)') +
theme_minimal()
durant_shot_chart
ggsave("../images/kevin-durant-shot-chart.pdf", width=6.5, height=5)
thompson_scatterplot <- ggplot(data = thompson) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
thompson_scatterplot
thompson_shot_chart <- ggplot(data = thompson) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Klay Thompson (2016 season)') +
theme_minimal()
durant_shot_chart
ggsave("../images/klay-thompson-shot-chart.pdf", width=6.5, height=5)
## Stephen Curry Shot Chart ##
curry_scatterplot <- ggplot(data = curry) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
curry_scatterplot
curry_shot_chart <- ggplot(data = curry) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Stephen Curry (2016 season)') +
theme_minimal()
durant_shot_chart
ggsave("../images/stephen-curry-shot-chart.pdf", width=6.5, height=5)
ggplot(data = shots_data_summary) + geom_point(aes(x = x, y = y, color = shot_made_flag)) + ggtitle("All") + facet_wrap(~name)
a <- ggplot(data = shots_data_summary) + geom_point(aes(x = x, y = y, color = shot_made_flag)) + ggtitle("All") + facet_wrap(~name)
a
a <- ggplot(data = shots_data_summary) + geom_point(aes(x = x, y = y, color = shot_made_flag)) + ggtitle("All") + facet_wrap(name)
shots_data_summary
a <- ggplot(data = shots_data_summary) + geom_point(aes(x = x, y = y, color = shot_made_flag)) + ggtitle("All") + facet_grid(name)
a
a <- ggplot(data = shots_data_summary) + geom_point(aes(x = x, y = y, color = shot_made_flag)) + ggtitle("All") + facet_grid(~name)
a
a <- ggplot(data = shots_data_summary) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
+ ggtitle("All") + facet_grid(~name) + theme_minimal()
a
a <- ggplot(data = shots_data_summary) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) + facet_grid(~name) + theme_minimal()
a
a <- ggplot(data = shots_data_summary) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
a <- ggplot(data = shots_data_summary) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
a
all_shot_chart <- ggplot(data = shots_data_summary) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Stephen Curry (2016 season)') +
theme_minimal() + facet_grid(~name) + theme_minimal()
View(all_shot_chart)
a <- ggplot(data = curry) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
a
a <- ggplot(data = shots_data_summary) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
a
all_shot_chart <- ggplot(data = shots_data_summary) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Stephen Curry (2016 season)') +
theme_minimal() + facet_grid(~name) + theme_minimal()
ggplot(data = )
curry_scatterplot
## Stephen Curry Shot Chart ##
curry_scatterplot <- ggplot(data = curry) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
curry_scatterplot
#practice scatterplot
thompson_scatterplot <- ggplot(data = thompson) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
thompson_scatterplot
thompson_scatterplot
